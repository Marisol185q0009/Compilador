/* Generated By:JavaCC: Do not edit this line. Parser.java */
package edu.itsco;

import java.util.ArrayList;

public class Parser implements ParserConstants {

  private static ArrayList <Variable> listaVariables;


  public static void main(String args [])
  {

    listaVariables = new ArrayList<Variable>();
    Parser parser = new Parser(System.in);
    try {
        System.out.println("Bienvenidos al Compilador (Espa\u00f1ol)");
        parser.gramaticaPrincipal();
        System.out.println("Compilo Correctamente");
  }catch(ParseException pex) {
    System.err.println(pex.getMessage());
  }catch(Excepciones es) {
    System.err.println(es.getMessage());
  }

 }

  private static boolean existeVariable(Variable variable) {
    return listaVariables.contains(variable);
  }

  private static void agregarVariable(Variable variable)
    throws Excepciones {
    if(!existeVariable(variable)) {
      listaVariables.add(variable);
    }else {
      throw new Excepciones(variable,
      Excepciones.Tipo.Variables_Duplicadas);
    }
  }

  private static void variableDefinida(Variable variable)
  throws Excepciones{
    if(!existeVariable(variable)) {
      throw new Excepciones(variable,
      Excepciones.Tipo.Variables_Duplicadas);
    }
  }

  private static void variableInicializada(Variable variable)
  throws Excepciones {
   //obtener la variable de la lista(referencia)
   int index = listaVariables.indexOf(variable);
   variable = listaVariables.get(index);
   if(!variable.isInicializada()) {
     throw new Excepciones(variable,
     Excepciones.Tipo.Variables_no_Inicializadas);
   }
 }

  static final public void gramaticaPrincipal() throws ParseException, Excepciones {
    jj_consume_token(COMENZAR);
    jj_consume_token(ID);
    jj_consume_token(ALL);
    gramaticaSentencias();
    jj_consume_token(CLL);
  }

  static final public void gramaticaSentencias() throws ParseException, Excepciones {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANN:
      case GILBERT:
      case MARILLA:
        gramaticaDeclararVariable();
        break;
      case COOL:
        gramaticaCapturar();
        break;
      case JERRY:
        gramaticaImprimir();
        break;
      case BASH:
        gramaticaSi();
        break;
      case ELIZA:
        gramaticaMientras();
        break;
      case RACHEL:
        gramaticaHacerMientras();
        break;
      case RUBY:
        gramaticaCambiar();
        break;
      case ID:
        gramaticaAsignacion();
        break;
      case MAY:
        gramaticaPara();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANN:
      case GILBERT:
      case MARILLA:
      case JERRY:
      case COOL:
      case BASH:
      case RUBY:
      case MAY:
      case ELIZA:
      case RACHEL:
      case ID:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
  }

  static final public void gramaticaDeclararVariable() throws ParseException, Excepciones {
  Token id;
  Token tipoDato;
    tipoDato = tipoDato();
    id = jj_consume_token(ID);
    Variable v = new Variable(id.image,tipoDato.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      jj_consume_token(IGUAL);
      valor();
       v.setInicializada(true);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
     agregarVariable(v);
    jj_consume_token(PC);
  }

  static final public Token tipoDato() throws ParseException {
  Token tipoDato;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANN:
      tipoDato = jj_consume_token(ANN);
      break;
    case GILBERT:
      tipoDato = jj_consume_token(GILBERT);
      break;
    case MARILLA:
      tipoDato = jj_consume_token(MARILLA);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return tipoDato;}
    throw new Error("Missing return statement in function");
  }

  static final public void valor() throws ParseException, Excepciones {
  Token id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VALOR_ANN:
      jj_consume_token(VALOR_ANN);
      break;
    case VALOR_GILBERT:
      jj_consume_token(VALOR_GILBERT);
      break;
    case VALOR_MARILLA:
      jj_consume_token(VALOR_MARILLA);
      break;
    case ID:
      id = jj_consume_token(ID);
     Variable v = new Variable();
     v.setId(id.image);
     variableDefinida(v);
     variableInicializada(v);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void gramaticaCapturar() throws ParseException, Excepciones {
  Token id;
    jj_consume_token(COOL);
    jj_consume_token(AP);
    id = jj_consume_token(ID);
    jj_consume_token(CP);
    jj_consume_token(PC);
     Variable v = new Variable();
     v.setId(id.image);
     variableDefinida(v);
     int index = listaVariables.indexOf(v);
     //System.out.println(index);
     listaVariables.get(index).setInicializada(true);
     //System.out.println(listaVariables.get(index).isInicializada());

  }

  static final public void gramaticaImprimir() throws ParseException, Excepciones {
    jj_consume_token(JERRY);
    jj_consume_token(AP);
    valor();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      jj_consume_token(SUMA);
      valor();
    }
    jj_consume_token(CP);
    jj_consume_token(PC);
  }

  static final public void gramaticaSi() throws ParseException, Excepciones {
    jj_consume_token(BASH);
    jj_consume_token(AP);
    condicion();
    jj_consume_token(CP);
    jj_consume_token(ALL);
    gramaticaSentencias();
    jj_consume_token(CLL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIANA:
      jj_consume_token(DIANA);
      jj_consume_token(ALL);
      gramaticaSentencias();
      jj_consume_token(CLL);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  static final public void condicion() throws ParseException, Excepciones {
    evaluacionSimple();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      opLogico();
      evaluacionSimple();
    }
  }

  static final public void evaluacionSimple() throws ParseException, Excepciones {
    valor();
    opRelacional();
    valor();
  }

  static final public void opRelacional() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAYOR:
      jj_consume_token(MAYOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
        jj_consume_token(IGUAL);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      break;
    case MENOR:
      jj_consume_token(MENOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
        jj_consume_token(IGUAL);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      break;
    case NOT:
      jj_consume_token(NOT);
      jj_consume_token(IGUAL);
      break;
    case IGUAL:
      jj_consume_token(IGUAL);
      jj_consume_token(IGUAL);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void opLogico() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      break;
    case OR:
      jj_consume_token(OR);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void gramaticaMientras() throws ParseException, Excepciones {
    jj_consume_token(ELIZA);
    jj_consume_token(AP);
    condicion();
    jj_consume_token(CP);
    jj_consume_token(ALL);
    gramaticaSentencias();
    jj_consume_token(CLL);
  }

  static final public void gramaticaHacerMientras() throws ParseException, Excepciones {
    jj_consume_token(RACHEL);
    jj_consume_token(ALL);
    gramaticaSentencias();
    jj_consume_token(CLL);
    jj_consume_token(ELIZA);
    jj_consume_token(AP);
    condicion();
    jj_consume_token(CP);
    jj_consume_token(PC);
  }

  static final public void gramaticaCambiar() throws ParseException, Excepciones {
  Token id;
    jj_consume_token(RUBY);
    jj_consume_token(AP);
    id = jj_consume_token(ID);
    jj_consume_token(CP);
    jj_consume_token(ALL);
    label_4:
    while (true) {
      jj_consume_token(WILLIAM);
      jj_consume_token(VALOR_ANN);
      jj_consume_token(PP);
      gramaticaSentencias();
      jj_consume_token(BILLY);
      jj_consume_token(PC);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WILLIAM:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GREEN:
      jj_consume_token(GREEN);
      gramaticaSentencias();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BILLY:
        jj_consume_token(BILLY);
        jj_consume_token(PC);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(CLL);
     Variable v = new Variable();
     v.setId(id.image);
     variableDefinida(v);
     variableInicializada(v);
  }

  static final public void gramaticaAsignacion() throws ParseException, Excepciones {
  Token id;
    id = jj_consume_token(ID);
    jj_consume_token(IGUAL);
    operacionSimple();
    jj_consume_token(PC);
     Variable v = new Variable();
     v.setId(id.image);
     variableDefinida(v);
     //
     int index = listaVariables.indexOf(v);
     listaVariables.get(index).setInicializada(true);
  }

  static final public void operacionSimple() throws ParseException, Excepciones {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case VALOR_ANN:
    case VALOR_GILBERT:
    case VALOR_MARILLA:
      valor();
      break;
    case AP:
      operacionParentesis();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
      case RESTA:
      case MULTIPLICACION:
      case DIVISION:
      case RESIDUO:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_5;
      }
      operadorAritmetico();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
      case VALOR_ANN:
      case VALOR_GILBERT:
      case VALOR_MARILLA:
        valor();
        break;
      case AP:
        operacionParentesis();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void operacionParentesis() throws ParseException, Excepciones {
    jj_consume_token(AP);
    operacionSimple();
    jj_consume_token(CP);
  }

  static final public void operadorAritmetico() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUMA:
      jj_consume_token(SUMA);
      break;
    case RESTA:
      jj_consume_token(RESTA);
      break;
    case MULTIPLICACION:
      jj_consume_token(MULTIPLICACION);
      break;
    case DIVISION:
      jj_consume_token(DIVISION);
      break;
    case RESIDUO:
      jj_consume_token(RESIDUO);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void gramaticaPara() throws ParseException, Excepciones {
  Token id;
    jj_consume_token(MAY);
    jj_consume_token(AP);
    id = jj_consume_token(ID);
    jj_consume_token(IGUAL);
    valor();
    jj_consume_token(PC);
    condicion();
    jj_consume_token(PC);
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUMA:
      jj_consume_token(SUMA);
      jj_consume_token(SUMA);
      break;
    case RESTA:
      jj_consume_token(RESTA);
      jj_consume_token(RESTA);
      break;
    case IGUAL:
      jj_consume_token(IGUAL);
      operacionSimple();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CP);
    jj_consume_token(ALL);
    gramaticaSentencias();
    jj_consume_token(CLL);
     Variable v = new Variable();
     v.setId(id.image);
     variableDefinida(v);
     variableInicializada(v);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x717e0,0x717e0,0x2000000,0xe0,0x0,0x100000,0x800,0xc000000,0x2000000,0x2000000,0x72000000,0xc000000,0x2000,0x4000,0x8000,0x80000000,0x1f00000,0x80000000,0x1f00000,0x2300000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x80,0x80,0x0,0x0,0x780,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x780,0x0,0x780,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
